----------------------------------------------
概念：

进程
程序（任务）的执行过程                     动态性
持有资源（共享内存，共享文件）和线程         载体

进程
比如eclipse
源代码文件编辑
源代码编译
语法校验

把进程比作一个班级，线程比作班级中的每一位同学，
其中座椅、板凳等资源属于班级，可以让每一位同学共享使用。

线程是系统中最小的执行单元。
同一进程中有多个线程。
线程共享进程的资源。

进程的交互
交互方式：互斥和同步
互斥，资源是竞争的。
同步，大家共同协作才能完成任务。


---------------------------------------------
Java对线程的支持
线程的创建和启动
线程常用方法
如何停止线程

1. Java对线程的支持
class Thread
interface Runnable
----public void run()


2. 线程的创建和启动
----线程的创建
Thread()
Thread(String name)
Thread(Runnable target)
Thread(Runnable target, String name)

----线程常用方法
启动线程
void start()

线程休眠
static void sleep(long millis)
static void sleep(long millis, long nanos)

使其他线程等待当前线程
void join()
void join(long millis)
void join(long millis, long nanos)

当前运行线程释放处理器资源
static void yield()

返回当前的线程引用
static Thread currentThread()

---------------------------------------
如何停止线程

不要使用Thread.stop()方法退出线程，有漏洞

应该使用标志退出线程
volatile，是可见性的关键
happens-before, ref JMM(Java Memory Model)
volatile 保证了线程正确的读取变量的值
volatile boolean keepRunning = true;

interrupt方法
interrupt方法的初衷不是停止线程


争用条件 Race Condition
当多个线程同时共享访问同一数据（内存区域）时，每个线程都尝试操作该数据，
从而导致数据被破坏（corrupted），这种现象称为争用条件。
关键数据，在某个时刻只能被一个线程访问。

线程的调用是通过分时和抢占完成的。

线程的交互：互斥与同步
同步的实现：wait()/notify()/notifyAll()
private final Object lockObj = new Object();
// 条件不满足，将当前线程放入等待集合 Wait Set
lockObj.wait();
// 唤醒所有在lockObj对象上等待的线程
lockObj.notifyAll();


如何理解同步：Wait Set
线程休息室

Critical Section 临界区，存放共享资源的共享区域
Wait Set 线程等待区

当一个线程需要访问共享资源时，首先需要获取共享区域的锁，之后进入临界区，
在临界区进行某些操作，如果某些条件不被满足时，调用锁的wait方法。
此时，线程会释放锁，然后进入到锁对象的wait set。
锁已经被释放，其他线程（非wait set中的线程）有机会竞争这个临界资源，
如果一个线程获得锁，进入临界区域并完成操作。此时，可以调用notify方法，
将会随机地唤醒该锁对象的wait set 中的一个线程，使得这个线程有机会竞争临界资源的锁对象；
或者，可以调用 notifyAll方法，唤醒该锁对象的等待区（wait set）中的所有线程，当该线程离开临界区后，
它们都有机会竞争临界区的锁对象。

----------------------------------------------
要点
1. 如何创建线程及线程的基本操作
2. 可见性及 volatile 关键字
3. 争用条件
4. 线程的互斥 synchronized
5. 线程的同步 wait / notify notifyAll

扩展Java并发的知识
Java Memory Mode
    JMM 描述了Java线程如何通过内存进行交互
    happens-before 原则
    synchronized, volatile & final (通过它们实现了 happens-before 原则)

Locks & Condition
    Java锁机制和等待条件的高层实现
    java.util.concurrent.locks(j.u.c)

线程的安全性
    原子性与可见性
    java.util.concurrent.atomic
    synchronized & volatile
    DeadLocks

多线程编程常用的交互模型
    Producer-Consumer 模型
    Read-Write Lock 模型
    Future 模型
    Worker Thread 模型

Java5 中并发编程工具
    java.util.concurrent
    线程池 ExecutorService
    Callable & Future
    BlockingQueue
    -------------是我们面向任务，更加简便的编写多线程程序

两本书
    Core Java Volume I-Fundamentals
    Java concurrency in practice






















