Socket编程

1 网络基础知识
2 InetAddress类
3 URL
4 TCP编程
5 UDP编程

-----------------------------------------------------

1 网络基础知识
TCP/IP是目前世界上应用最为广泛的协议
是以TCP和IP为基础的不同层次上多个协议的集合
也称TCP/IP协议族，或TCP/IP协议栈
TCP：Transmission Control Protocol 传输控制协议
IP：Internet Protocol 网际协议（互联网协议）

TCP/IP模型

5   应用层    HTTP 超文本传输协议，FTP文件传输协议，SMTP简单邮件传送协议，Telnet远程登录服务
4   传输层    TCP/IP协议
3   网络层
2   数据链路层
1   物理层

IP地址
为实现网络中不同计算机之间的通信，每台机器都必须有一个唯一的标识——IP地址。
IP地址相当于手机号码。
IP地址格式。

端口：
1 区分不同的应用程序
2 端口号范围是0~65535，其中0~1023为系统所保留
3 IP地址和端口号组成了Socket，Socket是网络上运行的程序之间双向通信链路的终结点，
  是TCP和UDP的基础。

常用默认的端口号:
http    80
ftp     21
telnet  23

Java中的网络支持
针对网络通信的不同层次,Java提供的网络功能有四大类：
1 InetAddress,用于标识网络上的硬件资源
2 URL,统一资源定位符，通过URL可以直接读取或写入网络上的数据
3 Socket,使用TCP协议实现网络通信的Socket相关的类
4 Datagram,数据报，使用UDP协议，将数据保存在数据报中，通过网络进行通信

-----------------------------------------------------
2 InetAddress类

InetAddress没有构造方法，通过静态方法创建对象。

-----------------------------------------------------
3 URL
（1）URL, Uniform Resource Locator,统一资源定位符，表示Internet上某一资源的地址
    也就是某一个资源的地址，俗称网址
（2）URL由两部分组成，协议名称和资源名称，中间用冒号隔开
（3）在java.net包中，提供了URL类来表示URL。

使用URL读取网页内容
(1)通过URL对象的openStream()方法可以得到指定资源的输入流、
(2)通过输入流可以读取、访问网络上的数据

-----------------------------------------------------
4 TCP编程

Socket通信
TCP协议是面向连接的、可靠的、有序的，以字节流的方式发送数据
基于TCP协议实现网络通信的类
    客户端的Socket类
    服务器端的ServerSocket类

Socket通信模型

Server                                  Client
建立服务端倾听socket
等待并接收连接请求           <----        创建连接socket向服务器端发送请求
接收请求后创建连接socket

InputStream                             OutputStream（通信，客户端发出信息）
OutputStream                            InputStream（通信，客户端接收信息）

关闭socket及相关资源                      关闭socket及相关资源

三个步骤：
建立连接、开始通信、结束通信

描述TCP通信过程：
开启服务器，等待客户端请求
客户端向服务器端发起请求
服务器端接受请求
客户端和服务器端相互通信
客户端和服务器端终止通信，关闭连接

Socket通信实现步骤：
(1)创建ServerSocket和Socket
(2)打开连接到Socket的输入和输出流
(3)按照协议对Socket进行读写操作
(4)关闭输入输出流、关闭Socket

服务器端：
(1) 创建ServerSocket对象，绑定监听端口
(2) 通过accept() 方法监听客户端请求
(3) 连接建立后，通过输入流读取客户端发送的请求信息
(4) 通过输出流想客户端发送响应信息（等待客户端接收读取）
(5) 关闭相应的资源

客户端
(1) 创建Socket对象，指明需要连接的服务器的地址和端口号
(2) 连接建立后，通过输出流向服务器端发送请求信息
(3) 通过输入流获取服务器响应的信息
(4) 关闭相应的资源

多线程服务器
应用而多线程来实现服务器与多客户端之间的通信
基本步骤：
(1)服务器端创建ServerSocket，循环调用accept()等待客户端连接
(2)客户端创建一个socket并请求和服务器端连接
(3)服务器端接受客户端请求，创建socket与该客户端建立专线连接
(4)建立连接的两个socket在一个单独的线程上对话
(5)服务器端继续等待新的连接

-----------------------------------------------------
5 UDP编程

UDP协议以数据报作为数据传输的载体
进行数据传输时，首先需要将要传输的数据定义成数据报（Datagram），
在数据报中指明数据所要达到的Socket（套接字，主机地址和端口号），
然后再将数据报发送出去。

相关操作类
DatagramPacket：表示数据报包
DatagramSocket：进行端到端通信的类

服务器端实现步骤：
(1)创建DatagramSocket，指定端口号
(2)创建DatagramPacket
(3)接收客户端发送的数据信息
(4)读取数据

客户端实现步骤
(1)定义发送消息
(2)创建DatagramPacket，包含将要发送的信息
(3)创建DatagramSocket
(4)发送数据

重点
(1)Socket通信原理
(2)基于TCP的Socket通信

经验和技巧
(1)多线程的优先级
    thread.setPriority(4); // 设置线程的优先级，范围是[1,10]，默认是5
    未设置优先级可能会导致运行时速度非常慢，可降低优先级

(2)是否关闭输入流和输出流
    对于同一个socket，如果关闭了输出流，则与该输出流关联的socket也会被关闭，
    所以一般不用关闭流，直接关闭socket即可。关闭socket就会关闭输出流。

(3)使用TCP通信传输对象
ObjectInputStream 和 ObjectOutputStream

OutputStream ops = socket.getOutputStream();
// 使用ObjectOutputStream对象序列化流，传递对象
ObjectOutputStream oos = new ObjectOutputStream(ops);
User user = new User("name", "pwd"); // 把数据封装为对象
oos.writeObject(user);  // 序列化

(4)socket编程传递文件
ObjectInputStream clientInputStream = null;
String fileNameTemp = "temp.txt"; // 下载后首先生成一个临时文件
String downloadPath = ConfigManager.getInstance().getString(Constants.CLIENT_DOWNLOAD_PATH);
try{
    clientInputStream = new ObjectInputStream(clientSocket.getInputStream());
    File fileTemp = new File(downloadPath + "/" + fileNameTemp);
    if (fileTemp.exists()) fileTemp.delete();
    fileTemp.createNewFile();
    BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(fileTemp));
    // 接收服务器的文件
    byte[] buff = new byte[1024];
    int len;
    while ((len = clientInputStream.read(buff)) != -1){
        bos.write(buff, 0, len);
        bos.flush();
    }
}

Java Socket 应用
根据所学知识，使用JDBC+IO+Socket编写一个控制台版本的“文件上传器”，实现文件上传功能。
主要功能：
用户注册
用户登录
上传文件（输入上传文件的路径）