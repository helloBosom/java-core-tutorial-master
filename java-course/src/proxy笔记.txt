01 代理模式概念介绍
代理模式的定义：
    为其他对象提供一种代理，以控制对这个对象的访问。
    代理对象起到中介作用，可以去掉功能服务或增加额外的服务。

常见的代理模式：
    远程代理：为不同地理的对象提供局域网代表对象。
    虚拟代理：根据需要将资源消耗很大的对象进行延迟，真正需要的时候进行创建。
    保护代理：
    智能引用代理：

----------------------------------------------------
02 常用代理模式原理

-静态代理概念及实现
    两种实现方式：
        静态代理
            （智能引用代理）
        动态代理

代理模式实现-静态代理
        静态代理：代理和被代理对象在代理之前是确定的，他们都实现相同的接口或者继承相同的抽象类。

程序
Movable
Car
EnhanceCar

-聚合比继承更适合代理模式
   添加日志、权限功能。
   可以使用一层一层的聚合来完成功能的迭代。
   Car car = new Car();
   TimeCar timeCar = new TimeCar(car);
   LogCar logCar = new LogCar(timeCar);

-JDK动态代理
    动态产生代理，实现对不同类，不同方法的代理
    Proxy
    InvocationHandler

-cglib动态产生代理
    jdk动态代理
        只能代理实现了接口的类，没有实现接口的类不能实现JDK的动态代理。
    cglib动态代理
        针对类来实现代理的，对指定目标类产生一个子类，通过方法拦截技术拦截所有父类方法的调用。
        （通过继承方法实现的动态代理，所以不能对使用final修饰的类动态代理）

----------------------------------------------------
03 自定义类模拟JDK动态代理的实现

- 模拟JDK动态代理实现思路分析及简单实现
- 完善动态代理实现
- 动态代理实现添加 InvocationHandler

----------------------------------------------------
04 代理模式总结

智能引用代理
    日志处理
    权限管理
    事务处理