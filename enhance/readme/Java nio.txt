《Java nio》
Ron Hitchens 著
裴小星 译

------------------------------------------------------

目录
第一章 简介
第二章 缓冲区
第三章 通道
第四章 选择器
第五章 正则表达式

------------------------------------------------------

前言
最切实地感受到妥协带来的后果的，莫过于 I/O 领域。虽然 Java 有一套完备的 I/O 类，但迄今
为止还只是针对通用特性，通常位于高端抽象层，横跨各种操作系统。这些 I/O 类主要面向流数
据，经常为了处理个别字节或字符，就要执行好几个对象层的方法调用。

这种面向对象的处理方法，将不同的 I/O 对象组合到一起，提供了高度的灵活性，但需要处理
大量数据时，却可能对执行效率造成致命伤害。 I/O 的终极目标是效率，而高效的 I/O 往往又无法
与对象形成一一对应的关系。高效的 I/O 往往意味着您要选择从 A 到 B 的最短路径，而执行大量
I/O 操作时，复杂性毁了执行效率。

传统 Java 平台上的 I/O 抽象工作良好，适应用途广泛。但是当移动大量数据时，这些 I/O 类可
伸缩性不强，也没有提供当今大多数操作系统普遍具备的常用 I/O 功能，如文件锁定、非块 I/O、
就绪性选择和内存映射。这些特性对实现可伸缩性是至关重要的，对保持与非 Java 应用程序的正
常交互也可以说是必不可少的，尤其是在企业应用层面，而传统的 Java I/O 机制却没有模拟这些通
用 I/O 服务。

------------------------------------------------------

第一章 简介

JVM 的 I/O 类喜欢操作小块数据——单个字节、几行文本。结果，
操作系统送来整缓冲区的数据， java.io 的流数据类再花大量时间把它们拆成小块，往往拷贝一
个小块就要往返于几层对象。操作系统喜欢整卡车地运来数据， java.io 类则喜欢一铲子一铲子
地加工数据。有了 NIO，就可以轻松地把一卡车数据备份到您能直接使用的地方（ByteBuffer 对
象）。

操作系统是现代软件工程的奇迹（没错，有的比奇迹还奇迹）。

在阅读本书的过程中，理解以下概念是非常重要的：
        • 缓冲区操作
        • 内核空间与用户空间
        • 虚拟内存
        • 分页技术
        • 面向文件的 I/O 和流 I/O
        • 多工 I/O（就绪性选择）


------------------------------------------------------
第二章 缓冲区





------------------------------------------------------



------------------------------------------------------



------------------------------------------------------


------------------------------------------------------



















