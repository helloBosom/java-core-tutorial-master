课程目录：
01. 传统线程技术回顾
02. 传统定时器技术回顾
03. 传统线程互斥技术
04. 传统线程同步通信技术
05. 线程范围内共享变量的概念与作用
06. ThreadLocal类及应用技巧
07. 多个线程之间共享数据的方式探讨
08. java5原子性操作类的应用
09. java5线程并发库的应用
10. Callable与Future的应用
11. java5的线程锁技术
12. java5读写锁技术的妙用
13. java5条件阻塞Condition的应用
14. java5的Semaphore同步工具
15. java5的CyclicBarrier同步工具
16. java5的CountDownLatch同步工具
17. java5的Exchanger同步工具
18. java5阻塞队列的应用
19. java5同步集合类的应用
20. 空中网挑选实习生的面试题1
21. 空中网挑选实习生的面试题2
22. 空中网挑选实习生的面试题3
23. 源代码与资料

------------------------------------------------
01_传统线程技术回顾

-创建线程的两种传统方式
    -方式1：继承Thread类，覆写run方法（run并不是抽象方法，Thread也不是抽象类）
    -方式2：实现Runnable接口，覆写run方法，将实例传递给Thread的构造方法。
    -多线程机制会提高程序的运行效率吗？为什么会有多线程下载呢？

-Thread 和 Runnable的区别：
 Runnable更能体现面向接口编程。建议实现Runnable接口，而不是继承Thread覆写run方法


代码，TraditionalThread

------------------------------------------------
02_传统定时器技术回顾
-Timer  定时器
-TimerTask  定时任务

schedule 调度

举例
定时收邮件等。
quartz工具，可以解决定时操作的需求。
生病了，要知道需要吃什么药，之前没吃过这个药也没问题。不知道吃什么药是个大问题。

------------------------------------------------
03_传统线程互斥技术
-线程的同步互斥与通信
    -使用synchronized代码块及其原理
    -使用synchronized方法
    -分析静态方法所使用的同步监视器对象是什么？
    -wait和notify实现线程间的通信
        -经验：要用到共同数据（包括同步锁）的若干个方法应该归在同一个类身上，这种设计正好体现了高类聚和程序的健壮性。

任何对象都可以作为锁，但是一直使用同一把锁来锁同一个门（同一个门栓），才可以起到互斥的效果。
静态的synchronized方法，使用的锁是字节码。

synchronized代码块和一个锁对象
synchronized方法和默认的锁对象
静态方法使用的同步监视器对象是静态代码块。

用什么进行互斥分组，就是通过synchronized（obj）中的obj不同，而分为不同的互斥组。


------------------------------------------------
04_传统线程同步通信技术
练习：
    子线程循环2次，接着主线程循环3，接着又回到子线程2次，
    接着再回到主线程又循环3次，如此循环5次，请写出程序。


------------------------------------------------
05_线程范围内共享变量的概念与作用

关于线程范围内的变量共享的举例，
创建三个线程，它们都访问了三个对象，第一个对象设置值，第二三个对象取值，同一个线程设置的值，只能被相同的线程获取。

首先用如下代码来说明如何实现全局共享：
class GlobalData{
    public static ThreadLocal var = new ThreadLocal();
}

全局静态变量可以被多个模块类共享，并且不管是哪个线程来调用，数据都是同一份。


------------------------------------------------
06_ThreadLocal类及应用技巧

ThreadLocal的作用和目的：
    用于实现线程内的数据共享，即对于相同的程序代码，多个模块在同一个线程中运行时要共享一份数据，而在另外线程中运行时又共享另外一份数据。

每个线程调用全局ThreadLocal对象的set方法，就相当于往其内部的map中增加一条记录，key分别是各自的线程，value是各自的set方法传进去的值。
    在此线程结束时可以调用ThreadLocal.clear方法，这样会更快释放内存，不调用也可以，因为线程结束后也可以自动释放相关的ThreadLocal变量。

ThreadLocal的应用场景：
    银行转账包含一些列操作：把转出账户的余额减少，把转入账户的余额增加，这两个操作要在同一个事务中完成，它们必须使用相同的数据连接对象，
    转入和转出操作的代码分别是两个不同的账户对象的方法。

实验：定义一个全局共享的ThreadLocal变量，然后启动多个线程向该ThreadLocal变量中存储一个随机值，接着各个线程调用另外其他多个类的方法，
     这多个类的方法中读取这个ThreadLocal变量的值，就可以看到多个类在同一个线程中共享同一份数据。

实现对ThreadLocal变量的封装，让外界不要直接操作ThreadLocal变量。
    -对基本类型的数据的封装，这种应用相对很少见。
    -对对象类型的数据的封装，比较常见，即让某个类针对不同线程分别创建一个独立的实例对象。

总结：
    一个ThreadLocal代表一个变量，故其中只能放一个数据，如果有两个变量都要线程范围内共享，则要顶一个两个ThreadLocal变量，
    如果有一百个变量要线程共享呢？那请先定义一个对象来装这一百个变量，然后在ThreadLocal中存储这一个对象。


------------------------------------------------
07_多个线程之间共享数据的方式探讨

-如果每个线程执行的代码相同，可以使用同一个Runnable对象，这个Runnable对象中有个共享数据，例如，卖票系统就可以这么做。

-如果每个线程执行的代码不同，这时候需要用不同的Runnable对象，有如下两种方式实现这些Runnable对象之间的数据共享：
    -将共享数据封装在另外一个对象中，然后将这个对象逐一传递给各个Runnable对象。每个线程对共享数据的操作方法也分配到那个对象身上去完成，
         这样容易实现针对该数据进行的各个操作的互斥和通信。
    -将这些Runnable对象作为某一个类中的内部类，共享数据作为这个外部类的成员变量，每个线程对共享数据的操作方法也分配给外部类，以便实现
         对共享数据的各个操作的互斥和通信，作为内部类的各个Runnable对象调用外部类的这些方法。
    -上面两种方式的组合：将共享数据封装在另外一个对象中，每个线程对共享数据的操作方法也分配那个对象身上去完成，对象作为这个外部类中的成员
         变量或方法中的局部变量，每个线程的Runnable对象作为外部类中的成员内部类或局部内部类。
    -总之，要同步互斥的极端代码最好是分别在几个独立的方法中，这些方法再放在同一个类中，这样比较容易实现它们之间的同步互斥和通信。

-极端且简单的方式，即在任意一个类中定义一个static的变量，这将被所有线程共享。


=====================================
Java5 线程并发库
=====================================

------------------------------------------------
08_java5原子性操作类的应用
Java5 中的线程并发库 java.util.concurrent包及其子包

java.util.concurrent.atomic包
-可以对基本数据，对数组中的基本数据，对类中的基本数据等进行操作
-通过如下两个方法快速理解atomic包的意义：
    -AtomicInteger类的boolean compareAndSet(expectedValue, updateValue)
    -AtomicIntegerArray类的int addAndGet(int i, int delta)
-解释volatile的作用，查看Java语言规范。

了解java.util.concurrent.lock

参考《Java并发编程的艺术》

------------------------------------------------
09_java5线程并发库的应用

线程池
    在线程池的编程模式下，任务是提交给整个线程池，而不是直接交给某个线程，线程池在拿到任务后，它就在内部找有无空闲的线程，再把任务交给
    内部某个空闲的线程，这就是封装。记住，任务是提交给整个线程池，一个线程同时只能执行一个任务，但可以同时向一个线程池提交多个任务。

-线程池的概念与Executors类的应用
    -创建固定大小的线程池
    -创建缓存线程池
    -创建单一线程池（如何实现线程死掉后重新启动？）
-关闭线程池
    -shutdown与shutdownNow使用

-用线程池的启动定时器
    -调用ScheduledExecutorService的schedule方法，返回的ScheduleFuture对象可以取消任务。
    -支持间隔重复任务的定时方式，不直接支持绝对定时方式，需要转换成相对时间方式。
        relative delays，使用date.getTime()-System.currentTimeMillis()表示以后的一个时间点

------------------------------------------------
10_Callable与Future的应用

Callable & Future

-Future取得的结果类型和Callable返回的结果类型必须一致，这是通过泛型来实现的。

-Callable要采用ExecutorService的submit方法提交，返回的future对象可以取消任务。

-CompletionService用于提交一组Callable任务，其take方法返回已完成的一个Callable任务对应的Future对象
    好比我同时种了几块地的麦子，然后就等待收割。收割时，则是哪块先成熟了，则先去收割哪块麦子。


------------------------------------------------
11_java5的线程锁技术

Lock & Condition 实现线程同步通信

-Lock比传统线程模型中的synchronized方式更加面向对象，与生活中的锁类似，锁本身也应该是一个对象。
    两个线程执行的代码片段要实现同步互斥的效果，它们必须用同一个Lock对象。
    锁是上在代表要操作的资源的的类的内部方法中，而不是线程代码中。

    用公共厕所里的门闩比喻锁，更容易让人理解。


Lock lock = new ReentrantLock();  // 可重入锁，可重入锁
lock.lock();   // 使用finally代码块释放锁
try{
    //....
} finally{
    lock.unlock();
}


------------------------------------------------
12_java5读写锁技术的妙用

-读写锁：分为读锁和写锁，多个读锁不互斥，读锁与写锁互斥，写锁与写锁互斥，这是由JVM自己控制的，你只要上好相应的锁即可。
        如果你的代码只读数据，可以很多人同时读，但不能同时写，那就上读锁；
        如果你的代码修改数据，只能有一个人在写，且不能同时读取，那就上写锁。
        总之，读的时候上读锁，写的时候上写锁。

        一个面试题：写一个缓存类。

写锁降级为读写锁（更新锁）


ReentrantReadWriteLock文档中的示例代码
//////////////////////////////////////////////////////////
class CachedData {
Object data;
volatile boolean cacheValid;
final ReentrantReadWriteLock rwl = new ReentrantReadWriteLock();

void processCachedData() {
 rwl.readLock().lock();
 if (!cacheValid) {
   // Must release read lock before acquiring write lock
   rwl.readLock().unlock();
   rwl.writeLock().lock();
   try {
     // Recheck state because another thread might have
     // acquired write lock and changed state before we did.
     if (!cacheValid) {
       data = ...
       cacheValid = true;
     }
     // Downgrade by acquiring read lock before releasing write lock
     rwl.readLock().lock();
   } finally {
     rwl.writeLock().unlock(); // Unlock write, still hold read
   }
 }

 try {
   use(data);
 } finally {
   rwl.readLock().unlock();
 }
}
}
//////////////////////////////////////////////////////////



------------------------------------------------
13_java5条件阻塞Condition的应用

-Condition的功能类似在传统线程技术中的Object.wait和Object.notify的功能。
        在等待Condition时，允许发生"虚假唤醒"，这通常作为对基础平台语义的让步。对于大多数应用程序，这带来的实际影响很小，
        因为Condition应该总是在一个循环中被等待，并测试正被等待的状态声明。某个实现可以随意移除可能的虚假唤醒，但建议
        程序程序员总是假定这些虚假唤醒可能发生，因此总是在一个循环中等待。

-一个锁内部可以有多个Condition，即有多路等待和通知，可以参看jdk1.5提供的Lock与Condition实现的可阻塞队列的应用案例，从中除了要
        体味算法，还要体味面向对象的封装。在传统的线程机制中一个监视器对象上只能有一路等待和通知，要想实现多路等待和通知，必须嵌套
        使用多个监视器对象。（如果只用一个Condition，两个放的都在等，一旦一个放的进去了，那么它通知可能会导致另一个放接着往下走。）

        比Object的wait和notify的功能强大。
        Condition文档—— 有界队列（阻塞队列），多路Condition
                         class BoundedBuffer {
                           final Lock lock = new ReentrantLock();
                           final Condition notFull  = lock.newCondition();  // 在同一个Condition对象上通信
                           final Condition notEmpty = lock.newCondition();  // 在同一个Condition对象上通信

                           final Object[] items = new Object[100];
                           int putptr, takeptr, count;

                           public void put(Object x) throws InterruptedException {
                             lock.lock();
                             try {
                               while (count == items.length)
                                 notFull.await();
                               items[putptr] = x;
                               if (++putptr == items.length) putptr = 0;
                               ++count;
                               notEmpty.signal();
                             } finally {
                               lock.unlock();
                             }
                           }

                           public Object take() throws InterruptedException {
                             lock.lock();
                             try {
                               while (count == 0)
                                 notEmpty.await();
                               Object x = items[takeptr];
                               if (++takeptr == items.length) takeptr = 0;
                               --count;
                               notFull.signal();
                               return x;
                             } finally {
                               lock.unlock();
                             }
                           }
                         }



------------------------------------------------
14_java5的Semaphore同步工具

Semaphore实现信号灯
-Semaphore可以维护当前访问自身的线程个数，并提供了同步机制。使用Semaphore可以控制同时访问资源的线程个数，例如，实现一个文件允许的并发访问数。
    -Semaphore实现的功能就类似厕所有5个坑，假如有10个人要上厕所，那么同时能有多少个人去上厕所呢？同时只能有5个人能够占用，当5个人中的任何一个人
     让开后，其中在等待的另外5个人又有一个可以占用了。
    -另外等待的5个人中可以是随机获得优先机会，也可以是按照先来后到的顺序获得机会，这取决于构造Semaphore对象时传入的参数选项。


知道每种药治什么病是基础，当遇到某种病后想到使用哪种药就是华佗（可以解决问题了）


-单个信号量的Semaphore对象可以实现互斥锁的功能，并且可以是由一个线程获得了“锁”，再由另一个线程释放“锁”，这可应用于死锁恢复的一些场合。


------------------------------------------------
15_java5的CyclicBarrier同步工具
其他同步工具类
CyclicBarrier（循环路障）
    表示大家彼此等待，大家集合好后才开始出发，分散活动后又在指定地点集合碰面，这就好比整个公司的人员利用周末时间集体郊游一样，
    先各自从家出发到公司集合后，再同时出发到公园游玩，在指定地点集合后再开始就餐，……。


------------------------------------------------
16_java5的CountDownLatch同步工具

CountDownLatch
    -犹如倒计时计数器，调用CountDownLatch对象的countDown方法就将计数器减1，当计数到达0时，则所有等待者或单个等待者就开始执行。
    -可以实现一个人（也可以是多个人）等待其他所有都来通知他，可以实现一个人通知多个人的效果，类似裁判一声口令，运动员同时开始奔跑，
     或者所有运动员都跑到终点后裁判才可公布结果，用这个功能做百米赛跑的游戏程序不错。
     还可以实现一个计划需要多个领导都签字后才能继续向下实施的情况。


------------------------------------------------
17_java5的Exchanger同步工具

Exchanger
    -用于实现两个人之间的数据交换，每个人在完成一定的事务后想与对方交换数据，第一个先拿出数据的人将一直等待第二个人拿着数据到来时，
     才能彼此交换数据。
     关于Exchange的比喻：好比两个毒贩要进行交易，一手交钱、一手交易，不管谁先到接头地点后，就处于等待状态了，当另外一方也到达了
        接头地点（所谓到达接头地点，也就是达到了准备接头的状态）时，两者的数据就立即交换了， 然后就又可以各忙各的了。
     exchange方法就相等于两手高高举着待交换物，等待人家前来交换，一旦人家到来（即人家也执行到exchange方法），则两者立马完成数据的交换。


------------------------------------------------
18_java5阻塞队列的应用

可阻塞的队列
-队列包含固定长度的队列和不固定长度的队列（有界队列和无界队列）

-什么是可阻塞队列，阻塞队列的作用于实际应用，阻塞队列的实现原理

-ArrayBlockingQueue
    -看BlockingQueue类的帮助文档，其中有各个方法的区别对比的表格。
    -只有put方法和take方法才具有阻塞功能

-用3个空间的队列演示阻塞队列的功能和效果。

-用两个具有1个空间的队列来实现同步通知的功能。
    先将数据放到队列A中；
    A中有数据，可以操作数据，操作完之后，从A中取出该数据并放到B队列；
    B中有数据，可以操作数据，操作完之后，从B中取出该数据并放到A队列；
    ……
    如此往复，实现通信。


-阻塞队列与Semaphore有些类似，但也不同，阻塞队列是一方村放数据，另一方释放数据，Semaphore通常是由同一方设置和释放信号量。


------------------------------------------------
19_java5同步集合类的应用
同步集合

-传统集合类在并发访问时的问题说明
    分析并发访问HashSet造成死循环的情况。（iterator.hasNext() 永不为false）

-传统方式下用Collections工具类提供的synchronizedCollection方法来获得同步集合，分析该方法的实现源码。
    可以同时读操作，不可以同时写操作。
    Collections.SynchronizedMap的源码，代理，和Map中一样的方法签名上添加上synchronized关键字，方法体内部调用Map的方法。

-Java5中提供了如下一些同步集合类：
    -查看java.util.concurrent包下的并发集合
    -ConcurrentHashMap
    -ConcurrentSkipListMap（类似TreeMap，是有序的）
    -ConcurrentSkipListSet（类似TreeSet，是有序的）
    -CopyOnWriteArrayList
    -CopyOnWriteArraySet

-传统方式下的Collection在迭代集合时，不允许对集合进行修改。
    -根据AbstractList的checkForComodification方法的源码，分析产生ConcurrentModificationException异常的原因。
        fast-fail


------------------------------------------------


------------------------------------------------










































